<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
           elementFormDefault="qualified"
           vc:minVersion="1.1">
    <xs:annotation>
      <xs:documentation xml:lang="en">
	The transitional updateinfo schema is designed to validate existing
        updateinfo files as in use by recent/current versions of major Linux
        distributions. Its goal is to validate what would be reasonable
        updateinfo files, with clear documentation about constraints, and what
        attributes and elements should be ignored by existing tooling, and
        thus may be not allowed in a strict schema.

        Software aiming to parse or produce updateinfo XML files for modern
        Linux distributions should be able to use this schema, as it represents
        the reasonable current common ground, and allowances for reasonable
        variations.

	Remember: be strict in what you emit, permissive in what you parse.

        The following updateinfo is known to validate with the permissive
        schema but not with this transitional schema:

        - Fedora 18 and earlier (EoL 2014-01-14) and EPEL4 (EoL 2012-02-29)
          are not valid due to the reboot_suggested change.
        - Fedora 17 and openSUSE 11 (EoL 2019-03-31) due to having duplicate
          update IDs.
        - Alma Linux 8 due to the reboot_suggested change.
        - Rocky Linux prior to the fix for https://github.com/resf/distro-tools/issues/32
      </xs:documentation>
    </xs:annotation>
  <xs:element name="updates">
    <xs:annotation>
      <xs:documentation xml:lang="en">
	The top level element is updates, which contains zero or more update
	elements, each describing a particular available update, which can be
	comprised of many individual package updates.

        There is no current standard as to what xmlns should be set to.
        OpenSUSE 11.0 is the only place where an xmlns attribute is present.
	If an `xmlns` attribute with the value "http://novell.com/package/metadata/suse/updateinfo"
	is found, it should be ignored.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
	<xs:element name="update" minOccurs="0" maxOccurs="unbounded" type="updateType">
	  <xs:annotation>
	    <xs:documentation xml:lang="en">
	      Zero or more updates may be available. Each instance of an update
	      element describes that unique update. There is no formal
	      definition of what constitutes an update, or what necessitates
	      multiple rather than a single update.
	      The granularity of what goes into a single update is up to
	      the vendor.

	      Convention is that each update is issued by a vendor, and any
	      references to third party identifiers such as a CVE appear in
	      the references element for that update.

              There are very few constraints about what constitutes an update.
              Multiple updates can refer to the same package. Multiple updates
              can refer to the exact same version of a package. Many elements
              and attributes are optional. Packages and exact package versions
              referred to are NOT required to be present in the repository.
	    </xs:documentation>
	  </xs:annotation>
	  <xs:unique name="updateId">
            <xs:annotation>
              <xs:documentation xml:lang="en">
                Each update described in updateinfo has an ID. Within a single
                updateinfo file (and thus rpm repository), IDs MUST be unique.

                Fedora 17 (EoL July 2013) did contain some duplicate entries,
                and this is the only known occurrance of this uniqueness not
                being true.

                Across repositories, there is no enforced constraint on uniqueness.
                Vendors producing updateinfo SHOULD NOT create ambiguity by re-using
                IDs across repositories, especially across repositories designed
                to be used together (e.g. core and optional package repositories for
                a single OS version).

                Producers SHOULD aim to as much as possible reduce ambiguity for
                third party tools parsing updateinfo. While produces MAY use the
                same ID across multiple repositories if the advisory is common,
                this is something that can create ambiguity and SHOULD NOT be done.

                For example: Repositories A and B are for the same version of
                an OS, each containing an optional feature. If package X is
                identical in both, it could be reasonable for a producer of
                updateinfo to assume it is okay to use the same update ID in the
                updateinfo for an update to package X in both the A and B
                repositories. However, producers SHOULD NOT use the same ID in
                this scenario as it creates ambiguity for external
                tooling.

                In this example, external tooling can very easily see different
                content of A and B as updates are made to each repository and
                the tooling refreshes the information it has from each. While it
                may be possible to reason around how tooling should behave when
                an update is added, any change to the update (such as a change
                in description or severity) adds complexity and ambiguity that
                is easily resolved by the publisher of updateinfo using unique IDs.
              </xs:documentation>
            </xs:annotation>
	    <xs:selector xpath="*/update"/>
	    <xs:field xpath="id"/>
	  </xs:unique>
	</xs:element>
      </xs:sequence>
    </xs:complexType>
    <xs:key name="updateIdKey">
      <xs:selector xpath=".//update"/>
      <xs:field xpath="id"/>
    </xs:key>
  </xs:element>
  <xs:complexType name="updateType">
    <xs:all>
      <xs:annotation>
        <xs:documentation xml:lang="en">
	  Each update is represented by an update node. The minimum amount
          of information needed for a valid update is very little. Nearly
          everything is effectively optional, so care must be taken.
          
          Software which parses updateinfo MUST BE careful about fields that
          are optional, and the relatively few constraints placed on the
          information present.
        </xs:documentation>
      </xs:annotation>
      <xs:element type="xs:string" name="id" minOccurs="1" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
            Each update MUST have one, and only one ID. Each update id MUST
            be unique within a single updateinfo.xml file.

            See the documentation on the uniqueness constraint for details.

	    A few real-world updateinfo.xml files have duplicate IDs, see
            the permissive schema for details.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element type="xs:string" name="release" minOccurs="0" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
            This element SHOULD NOT be created, and SHOULD NOT be used
            by tools consuming updateinfo.xml. There is no standard as to
            the content of this element.

            Some real-world updateinfo.xml files have used this to contain
            the major version of the OS an update refers to, but this is not
            universal. See the permissive schema for details.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element name="severity" type="severityType" minOccurs="0" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
            Updates MAY have an associated severity as advice to the user.

	    While typically this is associated with a security update,
            this SHOULD NOT be assumed by tooling. Only updates of type
            security SHOULD BE assumed to be security updates. 
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element name="pushcount" type="xs:int" minOccurs="0" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
            This element SHOULD NOT be created, and SHOULD NOT be used
            by tools consuming updateinfo.xml. There is no standard as to
            the content of this element.

            The presence of this element will likely be invalid in the strict schema.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element type="xs:string" name="title" minOccurs="1" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
	    Each update MUST have a title element. This is a short description
            of the update. The content of the element may be empty, and this is
            valid.

            The length of the title SHOULD be 78 or fewer characters.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element name="updated" type="updateDateType" minOccurs="0" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
	    An optional element which contains when the update was last updated.
	    This could be the packages themselves, or modification to the
	    meta-data.

            If an update is changed after it is created, this element SHOULD
            exist and be updated with each change. Tooling parsing this field
            SHOULD NOT assume that all changes to the update are accompanied
            by an update of this field.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element name="issued" type="updateDateType" minOccurs="0" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
	    An optional element which contains when the update was first issued.

            This element SHOULD be present and SHOULD correspond to when the
            update entry was first pushlised in the repository.

            Tooling MUST NOT assume that this date corresponds to when any
            associated packages were added to the repository. The issued date
            of an update is independent of when a package was made available.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element type="xs:string" name="summary" minOccurs="0" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
	    An optional short summary of the update.

            A summary SHOULD be restricted to fewer than four lines of text.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element type="xs:string" name="message" minOccurs="0" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
            An optional element with a message to be presented to the user
            prior to applying the update.

            This element MAY be ignored by tooling, and there SHOULD NOT be
            an expectation that all package managers will present this message
            to an end user.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element type="xs:string" name="solution" minOccurs="0" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
	    Contains optional additional information for the user on addressing
	    the issue that the update addresses.

            This element MAY be ignored by tooling. There SHOULD NOT be any
            expectation that a user will see this text.

            Since the only real world occurrences of this element contain
            duplicate boilerplate text, the strict schema will likely not
            allow this element.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element type="xs:string" name="rights" minOccurs="0" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
	    Optional element containing copyright information for the content
            of the update element.

	    This has been spotted in the wild being used in Alma Linux, EPEL,
	    Fedora, Oracle Linux, and Rocky Linux. Notably, in these use cases,
	    the rights element has only contained copyright information and not
	    any details on licensing.

            There is no standard as to the content of this element.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element name="references" minOccurs="0" maxOccurs="1" type="updateReferencesType">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
	    An update can reference other sources of information. This is
	    widely used to point to places like bug trackers and more
	    information on particular CVEs.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element name="pkglist" type="pkglistType" minOccurs="1" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
	    Contains information about the packages relevant to this update.
	    A package manager will compare the installed version to these
	    packages in order to determine if the update has been applied.

	    It is generally expected that these packages are present in the
	    repository, but this should not be assumed. An update could contain
	    content saying that the package is no longer being supported by the
	    vendor, and issuing an update for a version that isn't present
	    would trigger software to raise a prominent alarm for users with
	    said packages installed.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element type="xs:string" name="reboot_suggested" minOccurs="0" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
            Software producing updateinfo SHOULD NOT create this element.

	    This element is present in the transitional schema in order to
            maintain support for some current (at time of writing)
            distribution versions such as Alma 8 and openSUSE Leap 15.

            For producing updateinfo, the Boolean element that is
            should be per-package SHOULD be created rather than this top level
            element.

            The per-package flag allows package
	    managers to not indicate a reboot is required if, for example,
	    a user only has the documentation sub-package installed rather than
	    the affected software.

            The strict schema will likely not allow this element, leaning on
            the per-package element.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
      <xs:element type="xs:string" name="description" minOccurs="0" maxOccurs="1">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
	    The full description of the update. Only one description should be
	    present for each update.

	    Rocky Linux 8 and 9 have been spotted in the wild having two
	    description elements, each with the same content.

	    The description can be empty, and this has been spotted in the wild
	    at least in EPEL 5.
	  </xs:documentation>
	</xs:annotation>
      </xs:element>
    </xs:all>
   <xs:attribute type="xs:string" name="from">
      <xs:annotation>
	<xs:documentation xml:lang="en">
	  This attribute MAY contain information as to the origin of the
          update. This attribute is optional and SHOULD NOT be created or parsed
          by tooling.

	  In the wild, most distributions have used a single email address
	  for all updates. Some repositories have been spotted using what
	  appears to be user names, as well as email style
	  &amp;lt;foo@bar&amp;lt;'. Thus, since it does not convey any
          meaningful information, it SHOULD be ignored and SHOULD NOT be
          created.
	</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="xs:string" name="author">
      <xs:annotation>
	<xs:documentation xml:lang="en">
          This optional attribute MAY contain information as to the author of the
          update. This attribute is optional and SHOULD NOT be created or parsed
          by tooling.

          Much like the from attribute, there is no meaningful information
          per-update that is conveyed by this attribute.
	</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute type="updateStatusType" name="status"/>
    <xs:attribute name="type" type="updateTypeType"/>
    <xs:attribute type="xs:string" name="version">
      <xs:annotation>
	<xs:documentation xml:lang="en">
          This optional attribute SHOULD NOT be created or parsed.

          It will likely not be present in the strict schema.

          Real world usage of the version attribute has rendered it
          not useful in distinguishing any meaningful information and
          all tooling SHOULD ignore it.
	</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="pkglistType">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="collection">
	<xs:complexType>
	  <xs:sequence>
            <xs:element name="name" minOccurs="0" maxOccurs="1"/>
	    <xs:element name="module" minOccurs="0" maxOccurs="1">
	      <xs:complexType>
		<xs:annotation>
		  <xs:documentation xml:lang="en">
		    Appears to exist in Alma Linux and nowhere else.
		  </xs:documentation>
		</xs:annotation>
		<xs:attribute name="name" type="xs:string"/>
		<xs:attribute name="stream" type="xs:string"/>
		<xs:attribute name="version" type="xs:string"/>
		<xs:attribute name="context" type="xs:string"/>
		<xs:attribute name="arch" type="xs:string"/>
	      </xs:complexType>
	    </xs:element>
            <xs:element name="package" minOccurs="0" maxOccurs="unbounded">
	      <xs:annotation>
		<xs:documentation xml:lang="en">
		  Fedora Modular repos don't have packages on some updates.
		</xs:documentation>
	      </xs:annotation>
              <xs:complexType>
		<xs:sequence>
		  <xs:element type="xs:string" name="filename"/>
		  <xs:element name="sum" type="packageSumType" minOccurs="0" maxOccurs="unbounded"/>
		  <xs:element type="actionSuggestedType" name="reboot_suggested" minOccurs="0" maxOccurs="1"/>
		  <xs:element type="actionSuggestedType" name="restart_suggested" minOccurs="0" maxOccurs="1"/>
		  <xs:element type="actionSuggestedType" name="relogin_suggested" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute type="xs:string" name="name"/>
		<xs:attribute type="xs:string" name="version"/>
		<xs:attribute type="xs:string" name="release"/>
		<xs:attribute type="xs:int" name="epoch">
                  <xs:annotation>
                    <xs:documentation xml:lang="en">
	              The Fedora 10 updateinfo used None for Epoch. This is
                      no longer valid in the transitional schema, and the
                      epoch value MUST follow the RPM specification for epoch
                      validity.
                    </xs:documentation>
                  </xs:annotation>
                </xs:attribute>
		<xs:attribute type="xs:string" name="arch"/>
		<xs:attribute type="xs:string" name="src"/>
              </xs:complexType>
            </xs:element>
	  </xs:sequence>
	  <xs:attribute type="xs:string" name="short"/>
	</xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute type="xs:string" name="short"/>
  </xs:complexType>
  <xs:complexType name="updateDateType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
	<xs:attribute type="xs:string" name="date">
	  <xs:annotation>
	    <xs:documentation xml:lang="en">
              The format of this field SHOULD be the ISO8601 format. If timezone
              data is absent, UTC can be assumed.

              For tools reading updateinfo, there are five formats that need to
              be parsed: "2016-12-06", "2016-12-06 09:43", "2016-12-06 09:43:08 UTC",
	      "2016-12-06 09:43:08", and UNIX style seconds since the epoch.
              Since timezone data is typically absent, treating all as UTC is
              strongly recommended.

              In the strict schema, only ISO8601 will be valid.
	    </xs:documentation>
	  </xs:annotation>
	</xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="updateTypeType">
    <xs:restriction base="xs:string">
      <xs:annotation>
	<xs:documentation xml:lang="en">
	  Fedora 40 uses bugfix, enhancement, newpackage, security,
	  and unspecified. The openSUSE documentation lists recommended,
	  optional, and feature as options.
	</xs:documentation>
      </xs:annotation>
      <xs:enumeration value="bugfix"/>
      <xs:enumeration value="enhancement"/>
      <xs:enumeration value="newpackage"/>
      <xs:enumeration value="security"/>
      <xs:enumeration value="unspecified"/>
      <xs:enumeration value="recommended"/>
      <xs:enumeration value="optional"/>
      <xs:enumeration value="feature"/>
      <xs:enumeration value="update">
	<xs:annotation>
	  <xs:documentation xml:lang="en">
	    Found in Fedora Core 6 updates.
	  </xs:documentation>
	</xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="actionSuggestedType">
    <xs:restriction base="xs:string">
      <xs:annotation>
	<xs:documentation xml:lang="en">
	  It's one of: an empty element, True, or 1.
	  OpenSuse 11 uses 1. Some use True.
	</xs:documentation>
      </xs:annotation>
      <xs:enumeration value="True"/>
      <xs:enumeration value="1"/>
      <xs:enumeration value=""/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="severityType">
    <xs:restriction base="xs:string">
      <xs:annotation>
	<xs:documentation xml:lang="en">
	  While the openSUSE schema does not define severity, it's commonly
	  used in other distributions such as Fedora and Amazon Linux.

	  The enumeration below is in order of decreasing severity, with
	  variation in capitalization not being significant. The severity
	  of Medium and Moderate are equivalent.

	  Tools parsing updateinfo should equate None, the empty string, and
	  the absence of the element as equivalent, and that the update does
	  not have a severity specified by the vendor.

	  Code producing severity should avoid None and the empty string, and
	  index on Critical, Important, Medium/Moderate, and Low. If there is
	  not a severity, then the element should be absent.

	  Real world usage shows that Moderate is used by Amazon Linux and
	  openSUSE, and Medium being used in Fedora. The None value has been
	  observed in Fedora 40 meta-data.

	  The non-capitalized versions have been observed in openSUSE and
	  Amazon Linux (1 and 2, not 2023) meta-data.
	  OpenSuSE 12.1 has an empty string for severity in one place.

	</xs:documentation>
      </xs:annotation>
      <xs:enumeration value="Critical"/>
      <xs:enumeration value="critical"/>
      <xs:enumeration value="Important"/>
      <xs:enumeration value="important"/>
      <xs:enumeration value="Medium"/>
      <xs:enumeration value="medium"/>
      <xs:enumeration value="Moderate"/>
      <xs:enumeration value="moderate"/>
      <xs:enumeration value="Low"/>
      <xs:enumeration value="low"/>
      <xs:enumeration value="None"/>
      <xs:enumeration value=""/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="updateReferencesType">
    <xs:annotation>
      <xs:documentation xml:lang="en">
	An update can reference outside sources for more information, such
	as a bug tracker or CVE page.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="reference" maxOccurs="unbounded" minOccurs="0">
	<xs:complexType>
	  <xs:simpleContent>
            <xs:extension base="xs:string">
              <xs:attribute type="xs:string" name="href" use="optional"/>
              <xs:attribute type="xs:string" name="id" use="optional"/>
              <xs:attribute type="xs:string" name="title" use="optional"/>
              <xs:attribute type="referenceTypeType" name="type" use="optional"/>
            </xs:extension>
	  </xs:simpleContent>
	</xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="referenceTypeType">
    <xs:restriction base="xs:string">
      <xs:annotation>
	<xs:documentation xml:lang="en">
          The id for a reference is specific to that reference type.

          Not all tooling needs to know each reference type and how to treat
          the id for that reference type.

          The href attribute is a URL for the reference and is usable by
          tooling with no knowledge of the reference type.

          The current transitional schema restricts the values to currently
          observed reference types. This should be further defined before
          being extended.
	</xs:documentation>
      </xs:annotation>
      <xs:enumeration value="bugzilla"/>
      <xs:enumeration value="cve"/>
      <xs:enumeration value="jira"/>
      <xs:enumeration value="fate"/>
      <xs:enumeration value="github"/>
      <xs:enumeration value="launchpad"/>
      <xs:enumeration value="sourceforge"/>
      <xs:enumeration value="rhsa"/>
      <xs:enumeration value="redhat"/>
      <xs:enumeration value="self"/>
      <xs:enumeration value="other"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="packageSumType">
    <xs:annotation>
      <xs:documentation xml:lang="en">
	Some updateinfo files contain checksums of the package file,
        such as Fedora Core 5 (sha1) and Rocky 9 (sha256).

        The checksum is redundant with other RPM repository metadata
        and SHOULD NOT be added to updateinfo.

        It is likely that this will not be allowed in the strict schema.
      </xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
	<xs:attribute type="xs:string" name="type"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="updateStatusType">
    <xs:restriction base="xs:string">
      <xs:annotation>
	<xs:documentation xml:lang="en">
          This optional attribute MAY contain information about the status of
          the update.

          Values of 'stable', 'final', 'pending', 'retracted', and 'testing'  have
          been observed in the wild.

          The values of 'stable' and 'final' are equivalent. These indicate that
          the update has been broadly released.

          The values of 'pending' and 'testing' are equivalent. These indicate
          that the update has not been broadly released and is in a testing
          or other pre-release phase.

          The value of 'retracted' indicates that the update has been withdrawn.
          Tooling SHOULD NOT use 'retracted' updates to decide what updates need
          to be installed on a system. The presence of a retracted update
          SHOULD be treated as historical information and presented as such.
	</xs:documentation>
      </xs:annotation>
      <xs:enumeration value="stable"/>
      <xs:enumeration value="final"/>
      <xs:enumeration value="pending"/>
      <xs:enumeration value="retracted"/>
      <xs:enumeration value="testing"/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
